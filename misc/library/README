Example/test of how to create a shared library with C and GCC in LINUX.

Instructions copy-pasted from: 
http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html

$ gcc -Wall -fPIC -c fruits.c
$ gcc -shared -Wl,-soname,libfruits.so.1 -o libfruits.so.1.0 fruits.o
$ sudo mkdir /opt/lib/
$ sudo mv libfruits.so.1.0 /opt/lib/
$ sudo ln -sf /opt/lib/libfruits.so.1.0 /opt/lib/libfruits.so
$ sudo ln -sf /opt/lib/libfruits.so.1.0 /opt/lib/libfruits.so.1

Compiler options:

 * -Wall: include warnings. See man page for warnings specified.
 * -fPIC: Compiler directive to output position independent code,
   a characteristic required by shared libraries. Also see "-fpic".
 * -shared: Produce a shared object which can then be linked with other
   objects to form an executable.
 * -W1: Pass options to linker. 
   In this example the options to be passed on to the linker are: 
   "-soname libfruits.so.1". The name passed with the "-o" option is 
   passed to gcc.
 * Option -o: Output of operation. In this case the name of the shared object 
   to be output will be "libfruits.so.1.0"

Library Links:
 
 * The link to /opt/lib/libfruits.so allows the naming convention for the 
   compile flag -lfruits to work.
 * The link to /opt/lib/libfruits.so.1 allows the run time binding to work. 

Library Path: 
Add /opt/lib to /etc/ld.so.conf
run $ ldconfig as root to configure the run-time bindings.

Library Header:
Add fruits.h to /usr/locale/include

Compile:
$ cd /test
$ gcc testfruits.c -L/opt/lib -lfruits -o testfruits.out

Was expecting to be able to leave out -L/opt/lib option from compiler, but 
wasn't.

