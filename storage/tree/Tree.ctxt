#BlueJ class context
comment0.target=Tree()
comment1.params=key
comment1.target=Node\ find(int)
comment1.text=\n@param\ Integer\ value\ searched\ for.\n@return\ The\ node\ with\ the\ key\ searched\ for\ or\ null.\n\n
comment10.target=Node\ min()
comment10.text=\nFind\ the\ minimum\ value\ in\ a\ binary\ tree.\ \n@return\ Node\ Minium\ valued\ note\ on\ the\ left\ flank.\n\n
comment11.params=root
comment11.target=Node\ findMin(Node)
comment11.text=\nTraverse\ the\ left-most\ sided\ nodes\ until\ null\ is\ reached,\ then\ \nreturn\ the\ root\ of\ that\ null\ value.\n@return\ Node\ Minium\ valued\ note\ on\ the\ left\ flank.\n\n
comment12.target=Node\ max()
comment12.text=\nFind\ the\ maxium\ value\ in\ a\ binary\ tree.\ \n@return\ Node\ Maxium\ valued\ note\ on\ the\ right\ flank.\n\n
comment13.params=root
comment13.target=Node\ findMax(Node)
comment13.text=\nTraverse\ the\ right-most\ sided\ nodes\ until\ null\ is\ reached,\ then\ \nreturn\ the\ root\ of\ that\ null\ value.\n@return\ Node\ Maxium\ valued\ note\ on\ the\ right\ flank.\n\n
comment2.params=key\ root
comment2.target=Node\ findKey(int,\ Node)
comment2.text=\n@param\ Integer\ value\ searched\ for.\n@param\ The\ parent\ Node\ to\ search\ within.\ \n@return\ The\ node\ with\ the\ key\ searched\ for\ or\ null.\n\n
comment3.target=void\ displayAsc()
comment3.text=\nDisplay\ the\ tree\ in\ ascending\ order.\n\n
comment4.params=root
comment4.target=void\ inOrder(Node)
comment4.text=\nRecursivly\ traverse\ the\ tree\ in\ ascending\ order.\n\n
comment5.params=key
comment5.target=void\ insert(int)
comment5.text=\n@param\ Insert\ a\ key\ value\ into\ the\ tree.\n\n
comment6.params=key\ root\ current
comment6.target=Node\ insertKey(int,\ Node,\ Node)
comment6.text=\nWill\ traverse\ a\ root\ tree\ untill\ it\ finds\ the\ correct\ null-value,\nin\ which\ case\ it\ will\ connect\ the\ new\ node\ to\ the\ null-value's\ \nparent.\ \n\n@param\ key\ Integer\ value\ to\ insert.\n@param\ root\ The\ parent\ Node\ to\ insert\ in.\n@param\ current\ The\ current\ position\ of\ our\ insertion\ routine.\n@return\ when\ the\ correct\ location\ is\ fund,\ it\ will\ return\ null.\ \n\n
comment7.params=key
comment7.target=Node\ newNode(int)
comment7.text=\nCreate\ a\ new\ node.\n@return\ Node\ newly\ created\ node.\n\n
comment8.params=key
comment8.target=void\ delete(int)
comment8.text=\nNot\ implemented\ yet.\n\n
comment9.params=root
comment9.target=Node\ successor(Node)
numComments=14
